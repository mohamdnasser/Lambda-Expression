why Lambda Expression ?
  1- Functional Programming Features
  2- Code optmization
  
  
Lambda Expression == annonymous object 
										1- NameLess Function
										2- No Return Type , No Return Value
										3- No Access Modifer
										
										
Rules of writing Lambda Expression :
   1- Remove Access Modifer
   2- Remove return type 
   3- remove function name
   4- you can remove () if the function has one argument
   5- you can remove return word but you Must remove {} with it.
   6- you can remove {} if you have one statement in the function
   
   
functional Interface : is the interface the have one Abstract method and can have many defulat and static methods
		
			regular interface can have : 
				1) abstract methods 
				2) default methods  (After Java 7)
				3) static methods  	(After Java 7)
				
 Exmaples of Functional interfaces 
     1- Runnabe --> run()
	 2- callable   --> call()
	 3- Compareable --> Compare()
	 4- actionListner --> actionListner()
	 
----------------------------------------------------------------------------------------------------------------------------------------------------------
Predefines functional interfaces  to invoke lambda Expression :
		1- Predicate
		2- function
		3- Consumer
		4- suppplier
----------------------------------------------------------------------------------------------------------------------------------------------------------
Predicate
    1- only have one parameter --- return boolean
	2- use it when you have condtional checks in your programm
	
	interface predicate<T>{
		public boolean test(T t);
	}
	
----------------------------------------------------------------------------------------------------------------------------------------------------------		
